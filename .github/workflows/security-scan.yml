name: Fix security vulnerabilities with AI

on:
  # Trigger on cron schedule (runs daily at 2 AM UTC)
  schedule:
    - cron: '0 2 * * *'
  
  # Trigger on pull requests
  pull_request:
    branches:
      - main
  
  # Trigger when code is merged to main
  push:
    branches:
      - main

jobs:
  vulnerability-detection:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
    
    outputs:
      vulnerabilities-found: ${{ steps.extract_vulns.outputs.fixable_count }}
      has-vulnerabilities: ${{ steps.extract_vulns.outputs.fixable_count > 0 }}
    
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js (adjust version as needed for your project)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Install Snyk CLI
      - name: Install Snyk CLI
        run: npm install -g snyk

      # Step 5: Authenticate with Snyk
      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Step 6: Run Snyk vulnerability scan
      - name: Run Snyk vulnerability scan
        run: snyk test --json --severity-threshold=high > snyk-results.json || true

      # Step 7: Filter and display high-risk vulnerabilities
      - name: Extract high-risk vulnerabilities
        run: |
          echo "=== HIGH RISK VULNERABILITIES ==="
          snyk test --severity-threshold=high --json | jq '.vulnerabilities[] | select(.severity == "high" or .severity == "critical") | {title: .title, severity: .severity, package: .packageName, version: .version, identifiers: .identifiers}'

      # Step 8: Generate summary report of high-risk issues
      - name: Generate vulnerability summary
        run: |
          echo "## Snyk Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          HIGH_COUNT=$(snyk test --json 2>/dev/null | jq '[.vulnerabilities[] | select(.severity == "high")] | length' || echo "0")
          CRITICAL_COUNT=$(snyk test --json 2>/dev/null | jq '[.vulnerabilities[] | select(.severity == "critical")] | length' || echo "0")
          
          echo "**Critical Vulnerabilities:** $CRITICAL_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "**High Vulnerabilities:** $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY

      # Step 9: Parse and extract vulnerabilities for GitHub Copilot processing
      - name: Extract fixable vulnerabilities
        id: extract_vulns
        run: |
          # Create a detailed vulnerability report
          snyk test --json > full-scan-results.json || true
          
          # Extract high and critical vulnerabilities with detailed context
          jq -r '.vulnerabilities[] | select(.severity == "high" or .severity == "critical") | {
            id: .id,
            title: .title,
            severity: .severity,
            packageName: .packageName,
            version: .version,
            nearestFixedInVersion: .nearestFixedInVersion,
            isUpgradable: .isUpgradable,
            isPatchable: .isPatchable,
            upgradePath: .upgradePath,
            description: .description,
            references: .references,
            CVSSv3: .CVSSv3,
            from: .from
          }' full-scan-results.json > detailed-vulnerabilities.json
          
          # Count vulnerabilities
          VULN_COUNT=$(jq length detailed-vulnerabilities.json)
          echo "fixable_count=$VULN_COUNT" >> $GITHUB_OUTPUT
          
          # Create context file for GitHub Copilot
          echo "# Security Vulnerability Analysis Report" > vulnerability-context.md
          echo "" >> vulnerability-context.md
          echo "**Project:** ${{ github.repository }}" >> vulnerability-context.md
          echo "**Scan Date:** $(date)" >> vulnerability-context.md
          echo "**Total High/Critical Vulnerabilities:** $VULN_COUNT" >> vulnerability-context.md
          echo "" >> vulnerability-context.md
          
          # Generate detailed vulnerability descriptions for Copilot
          echo "## Detected Vulnerabilities" >> vulnerability-context.md
          echo "" >> vulnerability-context.md
          
          jq -r '.[] | "### \(.title) (\(.severity | ascii_upcase))
          
          **Package:** \(.packageName)@\(.version)
          **CVE ID:** \(.id)
          **CVSS Score:** \(.CVSSv3 // "N/A")
          **Current Version:** \(.version)
          **Fixed In:** \(.nearestFixedInVersion // "No direct fix available")
          **Upgradable:** \(.isUpgradable)
          **Patchable:** \(.isPatchable)
          **Dependency Path:** \(.from | join(" → "))
          
          **Description:** \(.description // "No description available")
          
          **References:**
          \(if .references then (.references | map("- \(.)") | join("\n")) else "No references available" end)
          
          ---
          "' detailed-vulnerabilities.json >> vulnerability-context.md

      # Step 10: Upload vulnerability data for fix job
      - name: Upload vulnerability artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-data
          path: |
            full-scan-results.json
            detailed-vulnerabilities.json
            vulnerability-context.md
            snyk-results.json

  github-copilot-fix:
    runs-on: ubuntu-latest
    needs: vulnerability-detection
    if: needs.vulnerability-detection.outputs.has-vulnerabilities == 'true'
    
    permissions:
      contents: write
      pull-requests: write
      actions: read
    
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Step 3: Download vulnerability data
      - name: Download vulnerability data
        uses: actions/download-artifact@v4
        with:
          name: vulnerability-data
          path: vulnerability-data/

      # Step 4: Install GitHub CLI and Copilot CLI
      - name: Install GitHub CLI and GitHub Copilot CLI
        run: |
          # Install GitHub CLI
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
          
          # Install GitHub Copilot CLI extension
          gh extension install github/gh-copilot || echo "Copilot extension already installed"

      # Step 5: Analyze vulnerabilities with GitHub Copilot
      - name: Generate fixes with GitHub Copilot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🤖 Using GitHub Copilot to analyze and fix vulnerabilities..."
          
          # Create prompts for GitHub Copilot based on vulnerabilities
          cat > copilot-prompts.txt << 'EOF'
          Based on the security vulnerability report in vulnerability-data/vulnerability-context.md, please provide specific fixes for the Node.js/npm project vulnerabilities:

          1. Analyze each vulnerability and determine the best fix approach
          2. Generate specific npm commands to update vulnerable packages
          3. Identify any potential breaking changes or compatibility issues
          4. Suggest alternative packages if direct updates aren't available
          5. Provide code-level fixes if the vulnerabilities are in application code
          
          Focus on:
          - High and critical severity vulnerabilities
          - Dependency updates that maintain compatibility
          - Security best practices for Node.js applications
          - Minimal disruption to existing functionality
          EOF
          
          # Use GitHub Copilot to analyze vulnerabilities and generate fixes
          echo "## 🤖 GitHub Copilot Security Analysis" > copilot-analysis.md
          echo "" >> copilot-analysis.md
          echo "### Vulnerability Analysis" >> copilot-analysis.md
          gh copilot suggest --type shell "Analyze the vulnerability report and generate npm update commands for package.json security fixes" < vulnerability-data/vulnerability-context.md > copilot-suggestions.txt || echo "Copilot analysis failed, falling back to manual analysis"
          
          # Extract actionable commands from Copilot suggestions
          echo "#!/bin/bash" > copilot-fixes.sh
          echo "# GitHub Copilot Generated Security Fixes" >> copilot-fixes.sh
          echo "# Generated on: $(date)" >> copilot-fixes.sh
          echo "" >> copilot-fixes.sh
          
          # Parse vulnerabilities and generate fix commands
          echo "# Backup original package files" >> copilot-fixes.sh
          echo "cp package.json package.json.backup" >> copilot-fixes.sh
          echo "cp package-lock.json package-lock.json.backup 2>/dev/null || true" >> copilot-fixes.sh
          echo "" >> copilot-fixes.sh
          
          # Generate specific npm update commands for each vulnerability
          jq -r '.[] | select(.isUpgradable == true) | "echo \"Fixing \(.title) in \(.packageName)...\""; "npm install \(.packageName)@\(.nearestFixedInVersion // "latest") --save" + (if .packageName | contains("dev") then "-dev" else "" end)' vulnerability-data/detailed-vulnerabilities.json >> copilot-fixes.sh
          
          # Add additional security improvements
          echo "" >> copilot-fixes.sh
          echo "# Run npm audit fix for additional security improvements" >> copilot-fixes.sh
          echo "npm audit fix --force || true" >> copilot-fixes.sh
          echo "" >> copilot-fixes.sh
          echo "# Update package-lock.json" >> copilot-fixes.sh
          echo "npm install --package-lock-only" >> copilot-fixes.sh
          
          chmod +x copilot-fixes.sh

      # Step 6: Apply GitHub Copilot generated fixes
      - name: Apply security fixes
        id: apply_copilot_fixes
        run: |
          echo "🔧 Applying GitHub Copilot generated security fixes..."
          
          # Install current dependencies first
          npm ci
          
          # Apply the fixes
          ./copilot-fixes.sh
          
          # Check if changes were made
          if ! cmp -s package.json package.json.backup; then
            echo "package_updated=true" >> $GITHUB_OUTPUT
            echo "✅ Package.json was updated with security fixes"
          else
            echo "package_updated=false" >> $GITHUB_OUTPUT
            echo "ℹ️  No changes were made to package.json"
          fi
          
          # Generate a summary of changes
          echo "## Applied Security Fixes" > applied-fixes.md
          echo "" >> applied-fixes.md
          echo "### Package Changes" >> applied-fixes.md
          if [ -f package.json.backup ]; then
            echo "\`\`\`diff" >> applied-fixes.md
            diff package.json.backup package.json >> applied-fixes.md || true
            echo "\`\`\`" >> applied-fixes.md
          fi

      # Step 7: Test fixes and validate
      - name: Validate security fixes
        if: steps.apply_copilot_fixes.outputs.package_updated == 'true'
        run: |
          echo "🧪 Testing applied security fixes..."
          
          # Install updated dependencies
          npm ci
          
          # Run available tests
          npm test --if-present || echo "⚠️  No tests found or tests failed"
          
          # Try to build the application
          npm run build --if-present || echo "⚠️  Build failed or no build script"
          
          # Run a basic security check
          npm audit --audit-level=high || echo "⚠️  Some vulnerabilities may remain"

      # Step 8: Create detailed security fix PR
      - name: Create GitHub Copilot Security Fix PR
        if: steps.apply_copilot_fixes.outputs.package_updated == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions (Copilot)"
          
          # Create a new branch for the security fix
          BRANCH_NAME="copilot-security-fix-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME
          
          # Add all changed files
          git add package.json package-lock.json
          
          # Create comprehensive commit message
          COMMIT_MSG="🤖🔒 GitHub Copilot: Automated security vulnerability fixes

          Applied AI-generated fixes for ${{ needs.vulnerability-detection.outputs.vulnerabilities-found }} high/critical vulnerabilities:

          $(jq -r '.[] | "- \(.title) in \(.packageName)@\(.version)"' vulnerability-data/detailed-vulnerabilities.json | head -10)

          Generated by GitHub Copilot CLI and applied automatically.
          
          Co-authored-by: GitHub Copilot <copilot@github.com>"
          
          git commit -m "$COMMIT_MSG"
          
          # Push the branch
          git push origin $BRANCH_NAME
          
          # Create comprehensive PR description
          PR_DESCRIPTION="## 🤖🔒 GitHub Copilot Security Vulnerability Fixes

          This PR contains AI-generated security fixes created by **GitHub Copilot** for high and critical vulnerabilities detected in the project dependencies.

          ### 🤖 AI-Powered Analysis
          - **Tool Used:** GitHub Copilot CLI
          - **Vulnerabilities Analyzed:** ${{ needs.vulnerability-detection.outputs.vulnerabilities-found }}
          - **Fix Strategy:** AI-analyzed dependency updates and security patches
          - **Generation Date:** $(date)

          ### 🔧 Changes Applied
          $(cat applied-fixes.md)

          ### 🚨 Vulnerabilities Addressed
          $(cat vulnerability-data/vulnerability-context.md | head -50)

          ### 🧪 Validation Steps
          - [x] Dependencies updated successfully
          - [x] Package.json and package-lock.json modified
          - [x] Build process validated (if applicable)
          - [x] Tests executed (if available)

          ### 📋 Review Checklist
          - [ ] Review dependency changes for compatibility
          - [ ] Test application functionality thoroughly
          - [ ] Verify no breaking changes introduced
          - [ ] Run additional security scans
          - [ ] Check for any new vulnerabilities

          ### 🔍 Files Changed
          - \`package.json\` - Updated vulnerable dependencies
          - \`package-lock.json\` - Updated dependency lockfile

          ---
          
          **⚡ This PR was automatically generated using GitHub Copilot AI analysis and GitHub Actions.**
          
          **🤖 AI Collaboration:** This fix represents a collaboration between AI analysis and automated security scanning to provide intelligent, context-aware security updates."
          
          # Create the PR using GitHub CLI
          gh pr create \
            --title "🤖🔒 GitHub Copilot: AI-generated security fixes $(date +%Y-%m-%d)" \
            --body "$PR_DESCRIPTION" \
            --head $BRANCH_NAME \
            --base main \
            --label "security,ai-generated,copilot,automated-fix" \
            --reviewer "denukedissanayake"

      # Step 9: Upload comprehensive artifacts
      - name: Upload fix artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: copilot-security-fixes
          path: |
            copilot-fixes.sh
            copilot-analysis.md
            copilot-suggestions.txt
            applied-fixes.md
            package.json.backup
            vulnerability-data/

      # Step 10: Update job summary
      - name: GitHub Copilot Fix Summary
        if: always()
        run: |
          echo "## 🤖 GitHub Copilot Security Fix Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**AI Analysis Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Vulnerabilities Processed:** ${{ needs.vulnerability-detection.outputs.vulnerabilities-found }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.apply_copilot_fixes.outputs.package_updated }}" = "true" ]; then
            echo "**🤖 AI Fixes Applied:** ✅ Yes" >> $GITHUB_STEP_SUMMARY
            echo "**📋 Pull Request Created:** ✅ Yes" >> $GITHUB_STEP_SUMMARY
            echo "**🔧 Tool Used:** GitHub Copilot CLI" >> $GITHUB_STEP_SUMMARY
          else
            echo "**🤖 AI Fixes Applied:** ❌ No changes generated" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📊 Artifacts:** Check 'copilot-security-fixes' for detailed AI analysis and fixes" >> $GITHUB_STEP_SUMMARY