name: Fix security vulnerabilities with AI

on:
  # Trigger on cron schedule (runs daily at 2 AM UTC)
  schedule:
    - cron: '0 2 * * *'
  
  # Trigger on pull requests
  pull_request:
    branches:
      - main
  
  # Trigger when code is merged to main
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read
  security-events: write

jobs:
  vulnerability-detection:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
    
    outputs:
      vulnerabilities-found: ${{ steps.extract_vulns.outputs.fixable_count }}
      has-vulnerabilities: ${{ steps.extract_vulns.outputs.fixable_count > 0 }}
    
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js (adjust version as needed for your project)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Install Snyk CLI
      - name: Install Snyk CLI
        run: npm install -g snyk

      # Step 5: Authenticate with Snyk
      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Step 6: Run Snyk vulnerability scan
      - name: Run Snyk vulnerability scan
        run: snyk test --json --severity-threshold=high > snyk-results.json || true

      # Step 7: Filter and display high-risk vulnerabilities
      - name: Extract high-risk vulnerabilities
        run: |
          echo "=== HIGH RISK VULNERABILITIES ==="
          snyk test --severity-threshold=high --json | jq '.vulnerabilities[] | select(.severity == "high" or .severity == "critical") | {title: .title, severity: .severity, package: .packageName, version: .version, identifiers: .identifiers}'

      # Step 8: Generate summary report of high-risk issues
      - name: Generate vulnerability summary
        run: |
          echo "## Snyk Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          HIGH_COUNT=$(snyk test --json 2>/dev/null | jq '[.vulnerabilities[] | select(.severity == "high")] | length' || echo "0")
          CRITICAL_COUNT=$(snyk test --json 2>/dev/null | jq '[.vulnerabilities[] | select(.severity == "critical")] | length' || echo "0")
          
          echo "**Critical Vulnerabilities:** $CRITICAL_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "**High Vulnerabilities:** $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY

      # Step 9: Parse and extract vulnerabilities for GitHub Copilot processing
      - name: Extract fixable vulnerabilities
        id: extract_vulns
        run: |
          # Create a detailed vulnerability report
          echo "Creating detailed vulnerability report..."
          snyk test --json > full-scan-results.json || true
          
          # Check if we have scan results
          if [ ! -f "full-scan-results.json" ] || [ ! -s "full-scan-results.json" ]; then
            echo "No scan results found, creating empty results"
            echo '{"vulnerabilities": []}' > full-scan-results.json
          fi
          
          # Debug: Show structure of scan results
          echo "Scan results structure:"
          jq -r 'keys' full-scan-results.json 2>/dev/null || echo "Invalid JSON in scan results"
          
          # Extract high and critical vulnerabilities with detailed context
          echo "Extracting vulnerabilities..."
          jq -c '.vulnerabilities[]? // [] | select(.severity == "high" or .severity == "critical") | {
            id: (.id // "unknown"),
            title: (.title // "Unknown Vulnerability"),
            severity: (.severity // "unknown"),
            packageName: (.packageName // "unknown"),
            version: (.version // "unknown"),
            nearestFixedInVersion: (.nearestFixedInVersion // null),
            isUpgradable: (.isUpgradable // false),
            isPatchable: (.isPatchable // false),
            upgradePath: (.upgradePath // []),
            description: (.description // "No description available"),
            references: (.references // []),
            CVSSv3: (.CVSSv3 // null),
            from: (.from // [])
          }' full-scan-results.json 2>/dev/null | jq -s '.' > detailed-vulnerabilities.json || echo "[]" > detailed-vulnerabilities.json
          
          # Count vulnerabilities
          VULN_COUNT=$(jq 'length' detailed-vulnerabilities.json 2>/dev/null | head -n 1 | tr -d '\n\r' || echo "0")
          # Debug: show raw count value
          echo "Raw VULN_COUNT value: '$VULN_COUNT'"
          # Ensure it's a valid number
          if ! [[ "$VULN_COUNT" =~ ^[0-9]+$ ]]; then
            echo "Invalid vulnerability count: '$VULN_COUNT', setting to 0"
            VULN_COUNT=0
          fi
          echo "fixable_count=$VULN_COUNT" >> $GITHUB_OUTPUT
          echo "Found $VULN_COUNT high/critical vulnerabilities"
          
          # Create context file for GitHub Copilot
          echo "# Security Vulnerability Analysis Report" > vulnerability-context.md
          echo "" >> vulnerability-context.md
          echo "**Project:** ${{ github.repository }}" >> vulnerability-context.md
          echo "**Scan Date:** $(date)" >> vulnerability-context.md
          echo "**Total High/Critical Vulnerabilities:** $VULN_COUNT" >> vulnerability-context.md
          echo "" >> vulnerability-context.md
          
          # Generate detailed vulnerability descriptions for Copilot
          echo "## Detected Vulnerabilities" >> vulnerability-context.md
          echo "" >> vulnerability-context.md
          
          if [ "$VULN_COUNT" -gt 0 ] 2>/dev/null; then
            echo "Processing $VULN_COUNT vulnerabilities..."
            jq -r '.[] | "### \(.title // "Unknown Vulnerability") (\(.severity // "unknown" | ascii_upcase))
            
            **Package:** \(.packageName // "unknown")@\(.version // "unknown")
            **CVE ID:** \(.id // "N/A")
            **CVSS Score:** \(.CVSSv3 // "N/A")
            **Current Version:** \(.version // "unknown")
            **Fixed In:** \(.nearestFixedInVersion // "No direct fix available")
            **Upgradable:** \(.isUpgradable // false)
            **Patchable:** \(.isPatchable // false)
            **Dependency Path:** \(if .from then (.from | if type == "array" then join(" ‚Üí ") else tostring end) else "Direct dependency" end)
            
            **Description:** \(.description // "No description available")
            
            **References:**
            \(if .references then 
              (if (.references | type) == "array" then 
                (.references | map("- \(.)") | join("\n")) 
              else 
                "- \(.references)" 
              end) 
            else 
              "No references available" 
            end)
            
            ---
            "' detailed-vulnerabilities.json >> vulnerability-context.md 2>/dev/null || echo "Error processing vulnerability details" >> vulnerability-context.md
          else
            echo "No high or critical vulnerabilities detected."
            echo "No high or critical vulnerabilities detected." >> vulnerability-context.md
            echo "" >> vulnerability-context.md
            echo "‚úÖ This project appears to be secure from high and critical vulnerabilities!" >> vulnerability-context.md
          fi

      # Step 10: Upload vulnerability data for fix job
      - name: Upload vulnerability artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-data
          path: |
            full-scan-results.json
            detailed-vulnerabilities.json
            vulnerability-context.md
            snyk-results.json

      # Debug step: Show what we found
      - name: Debug vulnerability detection
        if: always()
        run: |
          echo "=== DEBUG INFORMATION ==="
          echo "Vulnerability files created:"
          ls -la *.json *.md 2>/dev/null || echo "No files found"
          echo ""
          echo "Detailed vulnerabilities content:"
          if [ -f detailed-vulnerabilities.json ]; then
            cat detailed-vulnerabilities.json | head -20
          else
            echo "detailed-vulnerabilities.json not found"
          fi
          echo ""
          echo "Vulnerability context preview:"
          if [ -f vulnerability-context.md ]; then
            head -20 vulnerability-context.md
          else
            echo "vulnerability-context.md not found"
          fi

  create-vulnerability-issue:
    runs-on: ubuntu-latest
    needs: vulnerability-detection
    if: needs.vulnerability-detection.outputs.has-vulnerabilities == 'true'
    
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Download vulnerability data
      - name: Download vulnerability data
        uses: actions/download-artifact@v4
        with:
          name: vulnerability-data
          path: vulnerability-data/

      # Step 3: Set up GitHub CLI authentication
      - name: Set up GitHub CLI authentication
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh auth status

      # Step 4: Create a single GitHub issue for all vulnerabilities
      - name: Create consolidated vulnerability issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üêõ Creating a single GitHub issue for all discovered vulnerabilities..."
          
          # Create labels if they don't exist
          echo "Creating repository labels..."
          gh label create "security" --description "Security vulnerability" --color "d73a4a" --force || echo "Security label exists"
          gh label create "vulnerability" --description "Security vulnerability found by scan" --color "b60205" --force || echo "Vulnerability label exists"
          gh label create "high-priority" --description "High priority issue" --color "ff6b6b" --force || echo "High-priority label exists"
          gh label create "critical" --description "Critical severity issue" --color "d10000" --force || echo "Critical label exists"
          gh label create "ai-fix-requested" --description "AI assistance requested for fix" --color "0052cc" --force || echo "AI-fix-requested label exists"
          gh label create "copilot-task" --description "Task assigned to GitHub Copilot" --color "0366d6" --force || echo "Copilot-task label exists"
          gh label create "scheduled" --description "Automatically scheduled task" --color "7057ff" --force || echo "Scheduled label exists"
          
          # Check if vulnerabilities file exists and has content
          if [ ! -f "vulnerability-data/detailed-vulnerabilities.json" ]; then
            echo "‚ùå No vulnerability data file found"
            exit 1
          fi
          
          # Count vulnerabilities
          VULN_COUNT=$(jq 'length' vulnerability-data/detailed-vulnerabilities.json 2>/dev/null || echo "0")
          echo "Found $VULN_COUNT vulnerabilities to process"
          
          if [ "$VULN_COUNT" -eq 0 ]; then
            echo "No vulnerabilities to create issues for"
            exit 0
          fi
          
          # Create a comprehensive vulnerability report for the single issue
          printf "# Security Vulnerability Analysis Report\n\n" > consolidated_report.md
          printf "**Repository:** %s\n" "${{ github.repository }}" >> consolidated_report.md
          printf "**Scan Date:** %s\n" "$(date)" >> consolidated_report.md
          printf "**Workflow Run:** [%s](%s/%s/actions/runs/%s)\n" "${{ github.run_id }}" "${{ github.server_url }}" "${{ github.repository }}" "${{ github.run_id }}" >> consolidated_report.md
          printf "**Total Vulnerabilities:** %s\n\n" "$VULN_COUNT" >> consolidated_report.md
          
          # Add detailed vulnerability information
          printf "## üîç Detected Vulnerabilities\n\n" >> consolidated_report.md
          
          # Process each vulnerability individually to avoid YAML issues
          jq -c '.[]' vulnerability-data/detailed-vulnerabilities.json | while IFS= read -r vuln; do
            VULN_ID=$(echo "$vuln" | jq -r '.id // "unknown"')
            VULN_TITLE=$(echo "$vuln" | jq -r '.title // "Unknown Vulnerability"')
            SEVERITY=$(echo "$vuln" | jq -r '.severity // "unknown"' | tr '[:lower:]' '[:upper:]')
            PACKAGE_NAME=$(echo "$vuln" | jq -r '.packageName // "unknown"')
            VERSION=$(echo "$vuln" | jq -r '.version // "unknown"')
            FIXED_VERSION=$(echo "$vuln" | jq -r '.nearestFixedInVersion // "No direct fix available"')
            DESCRIPTION=$(echo "$vuln" | jq -r '.description // "No description available"')
            IS_UPGRADABLE=$(echo "$vuln" | jq -r '.isUpgradable // false')
            IS_PATCHABLE=$(echo "$vuln" | jq -r '.isPatchable // false')
            CVSS_SCORE=$(echo "$vuln" | jq -r '.CVSSv3 // "N/A"')
            REFERENCES=$(echo "$vuln" | jq -r '.references[]? // "No references available"' | head -3 | paste -sd '\n')
            DEPENDENCY_PATH=$(echo "$vuln" | jq -r 'if .from then (.from | if type == "array" then join(" ‚Üí ") else tostring end) else "Direct dependency" end')
            
            printf "### %s in %s@%s (%s)\n\n" "$VULN_TITLE" "$PACKAGE_NAME" "$VERSION" "$SEVERITY" >> consolidated_report.md
            printf "**Package:** \`%s@%s\`\n" "$PACKAGE_NAME" "$VERSION" >> consolidated_report.md
            printf "**CVE ID:** %s\n" "$VULN_ID" >> consolidated_report.md
            printf "**CVSS Score:** %s\n" "$CVSS_SCORE" >> consolidated_report.md
            printf "**Fixed In:** \`%s\`\n" "$FIXED_VERSION" >> consolidated_report.md
            printf "**Upgradable:** %s\n" "$IS_UPGRADABLE" >> consolidated_report.md
            printf "**Patchable:** %s\n" "$IS_PATCHABLE" >> consolidated_report.md
            printf "**Dependency Path:** %s\n\n" "$DEPENDENCY_PATH" >> consolidated_report.md
            printf "**Description:** %s\n\n" "$DESCRIPTION" >> consolidated_report.md
            printf "**Fix Command Needed:**\n" >> consolidated_report.md
            printf "\`\`\`bash\n" >> consolidated_report.md
            printf "# Please provide specific npm/yarn command to fix this vulnerability\n" >> consolidated_report.md
            if [ "$IS_UPGRADABLE" = "true" ]; then
              printf "npm install %s@%s\n" "$PACKAGE_NAME" "$FIXED_VERSION" >> consolidated_report.md
            else
              printf "npm update %s\n" "$PACKAGE_NAME" >> consolidated_report.md
              printf "# Or alternative fix approach\n" >> consolidated_report.md
            fi
            printf "\`\`\`\n\n" >> consolidated_report.md
            printf -- "---\n\n" >> consolidated_report.md
          done
          
          # Create the consolidated issue
          ISSUE_TITLE="üîê Security Vulnerability Scan - $(date +%Y-%m-%d) - $VULN_COUNT vulnerabilities found"
          
          # Add action items and AI assistance requests
          printf "## üéØ Action Items\n\n" >> consolidated_report.md
          printf -- "- [ ] Review all detected vulnerabilities\n" >> consolidated_report.md
          printf -- "- [ ] Prioritize critical and high severity vulnerabilities\n" >> consolidated_report.md
          printf -- "- [ ] Apply fixes suggested by GitHub Copilot\n" >> consolidated_report.md
          printf -- "- [ ] Test fixes in development environment\n" >> consolidated_report.md
          printf -- "- [ ] Deploy fixes to production\n\n" >> consolidated_report.md
          
          printf "## ü§ñ GitHub Copilot Assistance Request\n\n" >> consolidated_report.md
          printf "@github-copilot please analyze and fix the %s security vulnerabilities detected in this scan:\n\n" "$VULN_COUNT" >> consolidated_report.md
          printf "### üéØ Primary Objectives:\n" >> consolidated_report.md
          printf "1. **Immediate Fixes:** Provide specific npm/yarn commands for each vulnerability\n" >> consolidated_report.md
          printf "2. **Risk Assessment:** Evaluate the security impact of each vulnerability\n" >> consolidated_report.md
          printf "3. **Compatibility Analysis:** Check for breaking changes in proposed fixes\n" >> consolidated_report.md
          printf "4. **Testing Strategy:** Recommend verification steps for each fix\n" >> consolidated_report.md
          printf "5. **Alternative Solutions:** Suggest alternatives if direct updates aren't safe\n\n" >> consolidated_report.md
          
          printf "*This issue was automatically created by the AI Security Scan workflow on %s*\n" "$(date)" >> consolidated_report.md
          printf "*Scan run: %s*\n" "${{ github.run_id }}" >> consolidated_report.md
          
          # Determine labels based on vulnerability count and severity
          LABELS="security,vulnerability,ai-fix-requested,copilot-task,scheduled"
          HAS_CRITICAL=$(jq -c '.[] | select(.severity == "critical")' vulnerability-data/detailed-vulnerabilities.json | head -1)
          HAS_HIGH=$(jq -c '.[] | select(.severity == "high")' vulnerability-data/detailed-vulnerabilities.json | head -1)
          
          if [ -n "$HAS_CRITICAL" ]; then
            LABELS="$LABELS,critical,high-priority"
          elif [ -n "$HAS_HIGH" ]; then
            LABELS="$LABELS,high-priority"
          fi
          
          echo "Creating consolidated vulnerability issue..."
          
          # Create the GitHub issue - don't initially assign anyone
          if ISSUE_URL=$(gh issue create \
            --title "$ISSUE_TITLE" \
            --body-file consolidated_report.md \
            --label "$LABELS" \
            2>/dev/null); then
            
            echo "‚úÖ Created consolidated issue: $ISSUE_URL"
            ISSUE_NUMBER=$(echo "$ISSUE_URL" | grep -o '[0-9]*$')
            
            # Direct assignment to GitHub Copilot using REST API (most reliable method)
            echo "ü§ñ Directly assigning issue #$ISSUE_NUMBER to GitHub Copilot..."
            
            # Try several methods to assign GitHub Copilot
            echo "Attempting to assign GitHub Copilot using multiple methods..."
            
            # Method 1: Direct gh issue edit command
            if gh issue edit "$ISSUE_NUMBER" --add-assignee "github-copilot[bot]" 2>/dev/null; then
              echo "‚úÖ Successfully assigned issue #$ISSUE_NUMBER to Copilot using CLI method"
            else
              echo "‚ö†Ô∏è CLI assignment failed, trying REST API..."
              
              # Method 2: REST API with gh api
              # Extract repository name from github.repository
              REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
              if gh api --method POST "/repos/${{ github.repository_owner }}/$REPO_NAME/issues/$ISSUE_NUMBER/assignees" \
                --input - <<< '{"assignees":["github-copilot[bot]"]}' 2>/dev/null; then
                echo "‚úÖ Successfully assigned issue #$ISSUE_NUMBER to Copilot using gh api"
              else
                echo "‚ö†Ô∏è gh api assignment failed, trying curl..."
                
                # Method 3: Direct curl request
                if curl -s -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository_owner }}/$REPO_NAME/issues/$ISSUE_NUMBER/assignees" \
                  -d '{"assignees":["github-copilot[bot]"]}' > /dev/null; then
                  echo "‚úÖ Successfully assigned issue #$ISSUE_NUMBER to Copilot using curl"
                else
                  echo "‚ö†Ô∏è All assignment methods failed. Issue created but not assigned to Copilot."
                fi
              fi
            fi
            
            # No GraphQL method - it's less reliable than direct REST API or CLI calls
              
              # Execute GraphQL query to find Copilot
              COPILOT_RESPONSE=$(gh api graphql --input - <<< "$FIND_COPILOT_QUERY" 2>/dev/null || echo "")
              
              if [ -n "$COPILOT_RESPONSE" ]; then
                # Extract Copilot actor ID - try both copilot-swe-agent and github-copilot[bot]
                COPILOT_ID=$(echo "$COPILOT_RESPONSE" | jq -r '.data.repository.suggestedActors.nodes[] | select(.login == "copilot-swe-agent" or .login == "github-copilot[bot]") | .id' 2>/dev/null | head -1 || echo "")
                
                if [ -n "$COPILOT_ID" ] && [ "$COPILOT_ID" != "null" ]; then
                  echo "‚úÖ Found Copilot agent with ID: $COPILOT_ID"
                  
                  # Get issue GraphQL ID
                  GET_ISSUE_QUERY='{
                    "query": "query($owner: String!, $repo: String!, $issueNumber: Int!) { repository(owner: $owner, name: $repo) { issue(number: $issueNumber) { id } } }",
                    "variables": {
                      "owner": "${{ github.repository_owner }}",
                      "repo": "${{ github.event.repository.name }}",
                      "issueNumber": '$ISSUE_NUMBER'
                    }
                  }'
                  
                  ISSUE_RESPONSE=$(gh api graphql --input - <<< "$GET_ISSUE_QUERY" 2>/dev/null || echo "")
                  ISSUE_ID=$(echo "$ISSUE_RESPONSE" | jq -r '.data.repository.issue.id' 2>/dev/null || echo "")
                  
                  if [ -n "$ISSUE_ID" ] && [ "$ISSUE_ID" != "null" ]; then
                    # Assign issue to Copilot using GraphQL mutation
                    ASSIGN_MUTATION='{
                      "query": "mutation($issueId: ID!, $actorId: ID!) { addAssigneesToAssignable(input: {assignableId: $issueId, assigneeIds: [$actorId]}) { assignable { ... on Issue { id title assignees(first: 10) { nodes { login } } } } } }",
                      "variables": {
                        "issueId": "'$ISSUE_ID'",
                        "actorId": "'$COPILOT_ID'"
                      }
                    }'
                    
                    ASSIGN_RESPONSE=$(gh api graphql --input - <<< "$ASSIGN_MUTATION" 2>/dev/null || echo "")
                    
                    if [ -n "$ASSIGN_RESPONSE" ]; then
                      ASSIGNEES=$(echo "$ASSIGN_RESPONSE" | jq -r '.data.addAssigneesToAssignable.assignable.assignees.nodes[].login' 2>/dev/null | tr '\n' ', ' | sed 's/,$//')
                      echo "‚úÖ Successfully assigned issue #$ISSUE_NUMBER to Copilot"
                      echo "Assignees: $ASSIGNEES"
                    else
                      echo "‚ö†Ô∏è Failed to assign issue to Copilot (GraphQL mutation failed)"
                      # Try REST API as a final attempt
                      gh api --method POST repos/:owner/:repo/issues/$ISSUE_NUMBER/assignees -f assignees='["github-copilot[bot]"]' 2>/dev/null && \
                        echo "‚úÖ Successfully assigned issue using REST API" || echo "‚ö†Ô∏è REST API assignment also failed"
                    fi
                  else
                    echo "‚ö†Ô∏è Failed to get issue GraphQL ID"
                  fi
                else
                  echo "‚ö†Ô∏è Copilot agent not found in repository suggested actors"
                  echo "Trying direct REST API call to assign GitHub Copilot..."
                  
                  # Try REST API as a final attempt
                  gh api --method POST repos/:owner/:repo/issues/$ISSUE_NUMBER/assignees -f assignees='["github-copilot[bot]"]' 2>/dev/null && \
                    echo "‚úÖ Successfully assigned issue using REST API" || echo "‚ö†Ô∏è REST API assignment also failed"
                fi
              else
                echo "‚ö†Ô∏è Failed to query repository suggested actors"
                echo "Trying direct REST API call to assign GitHub Copilot..."
                
                # Try REST API as a final attempt
                gh api --method POST repos/:owner/:repo/issues/$ISSUE_NUMBER/assignees -f assignees='["github-copilot[bot]"]' 2>/dev/null && \
                  echo "‚úÖ Successfully assigned issue using REST API" || echo "‚ö†Ô∏è REST API assignment also failed"
              fi
            fi
            
            # Pin the issue if possible
            gh issue pin "$ISSUE_NUMBER" 2>/dev/null || echo "‚ö†Ô∏è Could not pin issue (may not have permissions)"
            
          else
            echo "‚ùå Failed to create consolidated vulnerability issue"
          fi
          
          echo "Finished creating vulnerability issue"
          
          VULN_COUNT=$(jq 'length' vulnerability-data/detailed-vulnerabilities.json 2>/dev/null || echo "0")
          
          # Create comprehensive tracking issue
          TRACKING_TITLE="üîê Security Vulnerability Tracking - $(date +%Y-%m-%d) ($VULN_COUNT issues)"
          
          # Create tracking issue body using printf
          printf "## üö® Security Vulnerability Dashboard\n\n" > tracking_body.md
          printf "**Scan Date:** %s\n" "$(date)" >> tracking_body.md
          printf "**Total Vulnerabilities Found:** %s\n" "$VULN_COUNT" >> tracking_body.md
          printf "**Workflow Run:** [%s](%s/%s/actions/runs/%s)\n\n" "${{ github.run_id }}" "${{ github.server_url }}" "${{ github.repository }}" "${{ github.run_id }}" >> tracking_body.md
          
          printf "### üìä Vulnerability Summary\n" >> tracking_body.md
          printf "**Detected %s security vulnerabilities in this repository**\n\n" "$VULN_COUNT" >> tracking_body.md
          
          # Create a summary table of vulnerabilities
          printf "| Severity | Package | Vulnerability | Fixed In |\n" >> tracking_body.md
          printf "|----------|---------|--------------|----------|\n" >> tracking_body.md
          
          # Add each vulnerability to the summary table
          jq -c '.[]' vulnerability-data/detailed-vulnerabilities.json | while IFS= read -r vuln; do
            VULN_TITLE=$(echo "$vuln" | jq -r '.title // "Unknown Vulnerability"')
            SEVERITY=$(echo "$vuln" | jq -r '.severity // "unknown"' | tr '[:lower:]' '[:upper:]')
            PACKAGE_NAME=$(echo "$vuln" | jq -r '.packageName // "unknown"')
            VERSION=$(echo "$vuln" | jq -r '.version // "unknown"')
            FIXED_VERSION=$(echo "$vuln" | jq -r '.nearestFixedInVersion // "Not Available"')
            
            printf "| %s | %s@%s | %s | %s |\n" "$SEVERITY" "$PACKAGE_NAME" "$VERSION" "$VULN_TITLE" "$FIXED_VERSION" >> tracking_body.md
          done
          
          printf "\n" >> tracking_body.md
          printf "\n" >> tracking_body.md
          
          printf "### üéØ Action Items\n" >> tracking_body.md
          printf -- "- [ ] Review all created vulnerability issues\n" >> tracking_body.md
          printf -- "- [ ] Prioritize critical and high severity vulnerabilities\n" >> tracking_body.md
          printf -- "- [ ] Apply fixes suggested by GitHub Copilot\n" >> tracking_body.md
          printf -- "- [ ] Test fixes in development environment\n" >> tracking_body.md
          printf -- "- [ ] Deploy fixes to production\n" >> tracking_body.md
          printf -- "- [ ] Close resolved vulnerability issues\n\n" >> tracking_body.md
          
          printf "### ü§ñ AI Assistance\n" >> tracking_body.md
          printf "All individual vulnerability issues have been tagged with \`ai-fix-requested\` and include specific requests for GitHub Copilot assistance. Each issue contains:\n" >> tracking_body.md
          printf -- "- Detailed vulnerability analysis\n" >> tracking_body.md
          printf -- "- Copilot fix requests with specific questions\n" >> tracking_body.md
          printf -- "- Upgrade path recommendations\n" >> tracking_body.md
          printf -- "- Alternative solution suggestions\n\n" >> tracking_body.md
          
          printf "### üìà Progress Tracking\n" >> tracking_body.md
          printf "Use this issue to track the overall progress of fixing the %s vulnerabilities detected in this scan.\n\n" "$VULN_COUNT" >> tracking_body.md
          
          printf "**Next Steps:**\n" >> tracking_body.md
          printf "1. Review individual vulnerability issues created by this workflow\n" >> tracking_body.md
          printf "2. Follow Copilot suggestions for each vulnerability\n" >> tracking_body.md
          printf "3. Test and apply fixes systematically\n" >> tracking_body.md
          printf "4. Update this tracking issue with progress\n\n" >> tracking_body.md
          
          printf "*This tracking issue was automatically created by the AI Security Scan workflow*\n" >> tracking_body.md
          printf "*For detailed vulnerability information, check the individual issues linked above*\n" >> tracking_body.md
          
          # Check if tracking_body.md exists and has content
          if [ ! -f "tracking_body.md" ]; then
            echo "‚ùå tracking_body.md not found, creating minimal version"
            printf "## üö® Security Vulnerability Dashboard\n\n" > tracking_body.md
            printf "**Scan Date:** %s\n" "$(date)" >> tracking_body.md
            printf "**Total Vulnerabilities Found:** %s\n\n" "$VULN_COUNT" >> tracking_body.md
            printf "Please check the main security issue for details.\n" >> tracking_body.md
          fi

          # Print debug info
          echo "Tracking body content preview:"
          head -10 tracking_body.md
          
          # Create the tracking issue - don't initially assign anyone
          echo "Creating tracking issue..."
          if TRACKING_URL=$(gh issue create \
            --title "$TRACKING_TITLE" \
            --body-file tracking_body.md \
            --label "security,vulnerability,tracking,ai-fix-requested,copilot-task,scheduled" \
            2>/dev/null); then
            
            echo "‚úÖ Created tracking issue: $TRACKING_URL"
            TRACKING_NUMBER=$(echo "$TRACKING_URL" | grep -o '[0-9]*$')
            
            # Direct assignment to GitHub Copilot using REST API (most reliable method)
            echo "ü§ñ Directly assigning tracking issue #$TRACKING_NUMBER to GitHub Copilot..."
            
            # Try several methods to assign GitHub Copilot
            echo "Attempting to assign GitHub Copilot to tracking issue using multiple methods..."
            
            # Method 1: Direct gh issue edit command
            if gh issue edit "$TRACKING_NUMBER" --add-assignee "github-copilot[bot]" 2>/dev/null; then
              echo "‚úÖ Successfully assigned tracking issue #$TRACKING_NUMBER to Copilot using CLI method"
            else
              echo "‚ö†Ô∏è CLI assignment failed, trying REST API..."
              
              # Method 2: REST API with gh api
              # Extract repository name from github.repository
              REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
              if gh api --method POST "/repos/${{ github.repository_owner }}/$REPO_NAME/issues/$TRACKING_NUMBER/assignees" \
                --input - <<< '{"assignees":["github-copilot[bot]"]}' 2>/dev/null; then
                echo "‚úÖ Successfully assigned tracking issue #$TRACKING_NUMBER to Copilot using gh api"
              else
                echo "‚ö†Ô∏è gh api assignment failed, trying curl..."
                
                # Method 3: Direct curl request
                if curl -s -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository_owner }}/$REPO_NAME/issues/$TRACKING_NUMBER/assignees" \
                  -d '{"assignees":["github-copilot[bot]"]}' > /dev/null; then
                  echo "‚úÖ Successfully assigned tracking issue #$TRACKING_NUMBER to Copilot using curl"
                else
                  echo "‚ö†Ô∏è All assignment methods failed. Tracking issue created but not assigned to Copilot."
                fi
              fi
            fi
            
            # No GraphQL method - it's less reliable than direct REST API or CLI calls
              
              # Execute GraphQL query to find Copilot
              COPILOT_RESPONSE=$(gh api graphql --input - <<< "$FIND_COPILOT_QUERY" 2>/dev/null || echo "")
              
              if [ -n "$COPILOT_RESPONSE" ]; then
                # Extract Copilot actor ID - try both copilot-swe-agent and github-copilot[bot]
                COPILOT_ID=$(echo "$COPILOT_RESPONSE" | jq -r '.data.repository.suggestedActors.nodes[] | select(.login == "copilot-swe-agent" or .login == "github-copilot[bot]") | .id' 2>/dev/null | head -1 || echo "")
                
                if [ -n "$COPILOT_ID" ] && [ "$COPILOT_ID" != "null" ]; then
                  echo "‚úÖ Found Copilot agent with ID: $COPILOT_ID"
                  
                  # Get tracking issue GraphQL ID
                  GET_ISSUE_QUERY='{
                    "query": "query($owner: String!, $repo: String!, $issueNumber: Int!) { repository(owner: $owner, name: $repo) { issue(number: $issueNumber) { id } } }",
                    "variables": {
                      "owner": "${{ github.repository_owner }}",
                      "repo": "${{ github.event.repository.name }}",
                      "issueNumber": '$TRACKING_NUMBER'
                    }
                  }'
                  
                  ISSUE_RESPONSE=$(gh api graphql --input - <<< "$GET_ISSUE_QUERY" 2>/dev/null || echo "")
                  ISSUE_ID=$(echo "$ISSUE_RESPONSE" | jq -r '.data.repository.issue.id' 2>/dev/null || echo "")
                  
                  if [ -n "$ISSUE_ID" ] && [ "$ISSUE_ID" != "null" ]; then
                    # Assign tracking issue to Copilot using GraphQL mutation
                    ASSIGN_MUTATION='{
                      "query": "mutation($issueId: ID!, $actorId: ID!) { addAssigneesToAssignable(input: {assignableId: $issueId, assigneeIds: [$actorId]}) { assignable { ... on Issue { id title assignees(first: 10) { nodes { login } } } } } }",
                      "variables": {
                        "issueId": "'$ISSUE_ID'",
                        "actorId": "'$COPILOT_ID'"
                      }
                    }'
                    
                    ASSIGN_RESPONSE=$(gh api graphql --input - <<< "$ASSIGN_MUTATION" 2>/dev/null || echo "")
                    
                    if [ -n "$ASSIGN_RESPONSE" ]; then
                      ASSIGNEES=$(echo "$ASSIGN_RESPONSE" | jq -r '.data.addAssigneesToAssignable.assignable.assignees.nodes[].login' 2>/dev/null | tr '\n' ', ' | sed 's/,$//')
                      echo "‚úÖ Successfully assigned tracking issue #$TRACKING_NUMBER to Copilot"
                      echo "Assignees: $ASSIGNEES"
                    else
                      echo "‚ö†Ô∏è Failed to assign tracking issue to Copilot (GraphQL mutation failed)"
                      # Try REST API as a final attempt
                      gh api --method POST repos/:owner/:repo/issues/$TRACKING_NUMBER/assignees -f assignees='["github-copilot[bot]"]' 2>/dev/null && \
                        echo "‚úÖ Successfully assigned tracking issue using REST API" || echo "‚ö†Ô∏è REST API assignment also failed"
                    fi
                  else
                    echo "‚ö†Ô∏è Failed to get tracking issue GraphQL ID"
                  fi
                else
                  echo "‚ö†Ô∏è Copilot agent not found in repository suggested actors"
                  echo "Trying direct REST API call to assign GitHub Copilot..."
                  
                  # Try REST API as a final attempt
                  gh api --method POST repos/:owner/:repo/issues/$TRACKING_NUMBER/assignees -f assignees='["github-copilot[bot]"]' 2>/dev/null && \
                    echo "‚úÖ Successfully assigned tracking issue using REST API" || echo "‚ö†Ô∏è REST API assignment also failed"
                fi
              else
                echo "‚ö†Ô∏è Failed to query repository suggested actors"
                echo "Trying direct REST API call to assign GitHub Copilot..."
                
                # Try REST API as a final attempt
                gh api --method POST repos/:owner/:repo/issues/$TRACKING_NUMBER/assignees -f assignees='["github-copilot[bot]"]' 2>/dev/null && \
                  echo "‚úÖ Successfully assigned tracking issue using REST API" || echo "‚ö†Ô∏è REST API assignment also failed"
              fi
            fi
            
            # Pin the tracking issue if possible
            gh issue pin "$TRACKING_NUMBER" 2>/dev/null || echo "‚ö†Ô∏è Could not pin tracking issue (may not have permissions)"
            
            # Add Copilot coordination comment to tracking issue
            printf "## ü§ñ GitHub Copilot Coordination Request\n\n" > tracking_copilot_comment.md
            printf "@github-copilot please coordinate the resolution of %s security vulnerabilities detected in this scan:\n\n" "$VULN_COUNT" >> tracking_copilot_comment.md
            printf "**Master Coordination Tasks:**\n" >> tracking_copilot_comment.md
            printf "1. **Priority Assessment:** Review all %s vulnerability issues and recommend fixing order\n" "$VULN_COUNT" >> tracking_copilot_comment.md
            printf "2. **Dependency Analysis:** Check for conflicts between vulnerability fixes\n" >> tracking_copilot_comment.md
            printf "3. **Batch Processing:** Suggest which vulnerabilities can be fixed together safely\n" >> tracking_copilot_comment.md
            printf "4. **Risk Assessment:** Identify which fixes have highest impact vs. risk\n" >> tracking_copilot_comment.md
            printf "5. **Testing Strategy:** Recommend comprehensive testing approach for all fixes\n\n" >> tracking_copilot_comment.md
            printf "**Individual Issue Actions:**\n" >> tracking_copilot_comment.md
            printf "- Each vulnerability has its own issue with specific fix requests\n" >> tracking_copilot_comment.md
            printf "- All issues are labeled with \`copilot-task\` for your attention\n" >> tracking_copilot_comment.md
            printf "- Please provide specific npm/yarn commands for each vulnerability\n" >> tracking_copilot_comment.md
            printf "- Include compatibility and breaking change analysis\n\n" >> tracking_copilot_comment.md
            printf "**Expected Deliverables:**\n" >> tracking_copilot_comment.md
            printf "1. **Fix Priority Matrix:** Order of vulnerability resolution\n" >> tracking_copilot_comment.md
            printf "2. **Batch Fix Commands:** Grouped update commands where safe\n" >> tracking_copilot_comment.md
            printf "3. **Testing Checklist:** What to verify after each fix\n" >> tracking_copilot_comment.md
            printf "4. **Rollback Plan:** How to revert if fixes cause issues\n\n" >> tracking_copilot_comment.md
            printf "**Scan Details:**\n" >> tracking_copilot_comment.md
            printf "- **Workflow Run:** [%s](%s/%s/actions/runs/%s)\n" "${{ github.run_id }}" "${{ github.server_url }}" "${{ github.repository }}" "${{ github.run_id }}" >> tracking_copilot_comment.md
            printf "- **Scan Date:** %s\n" "$(date)" >> tracking_copilot_comment.md
            printf "- **Repository:** %s\n\n" "${{ github.repository }}" >> tracking_copilot_comment.md
            printf "Please coordinate responses across all vulnerability issues and provide an overall fix strategy here.\n\n" >> tracking_copilot_comment.md
            printf "*This is an automated coordination request from the AI Security Scan workflow*\n" >> tracking_copilot_comment.md
            
            # Add the Copilot coordination comment
            if gh issue comment "$TRACKING_NUMBER" --body-file tracking_copilot_comment.md 2>/dev/null; then
              echo "‚úÖ Added Copilot coordination comment to tracking issue #$TRACKING_NUMBER"
            else
              echo "‚ö†Ô∏è Failed to add Copilot coordination comment to tracking issue #$TRACKING_NUMBER"
            fi
            
          else
            echo "‚ùå Failed to create tracking issue"
          fi

      # No additional steps needed as we now create only a single issue

      # Step 8: Upload issue creation artifacts
      - name: Upload issue artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-issues
          path: |
            vulnerability-issues.md
            vulnerability-data/

      # Step 5: Update step summary
      - name: Issue creation summary
        if: always()
        run: |
          VULN_COUNT=$(jq 'length' vulnerability-data/detailed-vulnerabilities.json 2>/dev/null || echo "0")
          
          echo "## üêõ GitHub Security Issue Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Vulnerabilities Found:** $VULN_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "**Issue Creation Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### ü§ñ GitHub Copilot Integration" >> $GITHUB_STEP_SUMMARY
          echo "The security vulnerability issue includes:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Automatic Assignment:** Issue assigned to GitHub Copilot SWE agent" >> $GITHUB_STEP_SUMMARY
          echo "- üéØ **Specific Fix Requests:** Detailed Copilot assistance requests" >> $GITHUB_STEP_SUMMARY
          echo "- üìã **Actionable Tasks:** Clear requirements for fix commands" >> $GITHUB_STEP_SUMMARY
          echo "- üîç **Vulnerability Analysis:** Comprehensive security context" >> $GITHUB_STEP_SUMMARY
          echo "- üöÄ **Priority Classification:** Critical/High priority labeling" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Labels Applied:** \`security\`, \`vulnerability\`, \`ai-fix-requested\`, \`copilot-task\`, \`scheduled\`" >> $GITHUB_STEP_SUMMARY
          echo "**Priority Labels:** \`critical\`, \`high-priority\` (based on severity)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Consolidated Report" >> $GITHUB_STEP_SUMMARY
          echo "A single consolidated vulnerability report issue has been created with:" >> $GITHUB_STEP_SUMMARY
          echo "- Complete vulnerability analysis for Copilot review" >> $GITHUB_STEP_SUMMARY
          echo "- Automatic assignment to GitHub Copilot SWE agent" >> $GITHUB_STEP_SUMMARY
          echo "- Comprehensive fix request with specific objectives" >> $GITHUB_STEP_SUMMARY
          echo "- Expected response format and priority classification" >> $GITHUB_STEP_SUMMARY
